#!/bin/bash

# Clear the terminal log
clear

# Load functions
source maintain/functions.sh

# If docker is installed - it means restore-command is being run on host
if command -v docker >/dev/null 2>&1; then

  # Execute restore-command within the container environment passing all arguments, if any
  docker compose exec -it -e TERM="$TERM" wrapper bash "$(basename "${BASH_SOURCE[0]}")" $@

# Else it means we're in the wrapper-container, so proceed with the restore
else

  # Make sure execution stops on any error
  set -eu -o pipefail

  # Set up restore scenario based on 1st arg
  if [[ "${1:-}" = "dump" || "${1:-}" = "uploads" || "${1:-}" = "cancel" || "${1:-}" = "commit" ]]; then
    scenario="${1:-}"
  else
    scenario="full"
  fi

  # Setup GH_TOKEN
  [[ -z ${GH_TOKEN:-} && ! -z $GH_TOKEN_CUSTOM ]] && export GH_TOKEN=${GH_TOKEN_CUSTOM:-}

  # If first arg is 'cancel' or 'commit'
  if [[ "$scenario" = "cancel" || "$scenario" = "commit" ]]; then

    # If we're in an uncommitted restore state
    if is_uncommitted_restore; then

      # If first arg is 'cancel' - cancel restore for source code, database and uploads, i.e. revert all to the state
      # before restore. We don't have something like 'cancel_restore_dump', because dump.sql.gz will be moved into
      # data/ from data/before/ and then will be picked by mysql re-init
      if [[ "$scenario" = "cancel" ]]; then
        cancel_restore_source
        cancel_restore_uploads_and_dump

      # Else if first argument is 'commit' - backup the original version
      # and make restored version to be the new latest
      else
        backup_before_restore
        commit_restore
      fi

    # Else we're in ordinary state - print error message
    else
      echo "Your current ${APP_ENV:-} instance is NOT in an 'uncommitted restore' state, "
      echo "so there is nothing to be committed or cancelled"
      echo ""
      exit 1
    fi

  # Else
  else

    # Set up restore choice based on 1st arg for "full" scenario or based on 2nd arg for "dump" and "uploads" scenarios
    if [[ "$scenario" = "full" ]]; then
      tag="${1:-}"
    elif [[ "$scenario" = "dump" || "$scenario" = "uploads" ]]; then
      tag="${2:-}"
    else
      tag=""
    fi

    # If first argument is 'dump' or 'uploads'
    if [[ "$scenario" = "dump" || "$scenario" = "uploads" ]]; then
      if [[ -z "$tag" ]]; then
        echo -e "\nRESTORE ONLY: ${1:-}\n"
      fi
    fi

    # Load backups list and ask user to select one unless $tag is not empty
    release_choices "to be restored" "$tag"

    # Colors
    r="\e[31m" # red
    g="\e[32m" # green
    d="\e[0m"  # default

    # Print selected
    echo -e "SELECTED VERSION: ${g}$(get_release_title $selected)${d}\n"

    # If full restore needed
    if [[ "$scenario" = "full" ]]; then

      # If we're going to enter into an 'uncommitted restore' state then
      # do a preliminary local backup of current state so that we'll be
      # able to get back if restore will be cancelled
      backup_current_state_locally "data/before"

      # Restore source code in custom/ dir
      restore_source "$selected" "custom"
    fi

    # If first argument is NOT given or is given as "uploads"
    if [[ "$scenario" = "full" || "$scenario" = "uploads" ]]; then

      # Restore uploads
      restore_uploads "$selected"

      # If $tag is given - print a new line
      [[ ! -z "$tag" ]] && echo ""
    fi

    # If first argument is NOT given or is given as "dump"
    if [[ "$scenario" = "full" || "$scenario" = "dump" ]]; then

      # Download dump, stop MySQL, purge MySQL data, and wait for mysql re-init
      restore_dump "$selected"

      # If $tag is given - print a new line
      [[ ! -z "$tag" ]] && echo ""
    fi
  fi

  # If we're in an uncommitted restore state
  if is_uncommitted_restore; then

    # Print the restored version
    echo -e "RESTORED VERSION: ${g}$(git notes show)${d}\n"

    # Print the clarification
    echo "Your development instance is now in an 'uncommitted restore' state. Now you can"
    echo "look around and decide whether the version you've just restored - is REALLY the"
    echo "right one for keeping this instance at and for switching other instances to, if"
    echo "any, once any updated. If so - run 'source restore commit' command. Otherwise,"
    echo "you can either restore backup for another version via 'source restore' command,"
    echo "or you can cancel the restore via 'source restore cancel' command."
    echo ""
    echo "IMPORTANT: Creation of ANY new backups for this instance - is prevented until"
    echo "           your current restore is committed or cancelled."
    echo ""

  # Else if we've cancelled restore - print corresponding message
  elif [[ "$scenario" = "cancel" ]]; then
    echo ""
    echo "Your $APP_ENV instance is now reverted to the original version,"
    echo "which was active BEFORE you've entered in an 'uncommitted restore' state,"
    echo "so your instance is not in that state anymore and this means that"
    echo "backups creation is not prevented anymore as well."
    echo ""
  fi
fi

